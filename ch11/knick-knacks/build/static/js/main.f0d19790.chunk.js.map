{"version":3,"sources":["components/HelloD3Data/HelloD3Data.tsx","App.tsx","AppRouter.tsx","serviceWorker.ts","index.tsx"],"names":["ref","React","createRef","HelloD3Data","props","useEffect","draw","previousData","selectAll","each","d","i","push","JSON","stringify","data","console","log","select","current","enter","append","text","className","App","useState","setData","Button","onClick","to","key","MyPage","lazy","options","origins","AppRouter","fallback","exact","path","component","withQuicklink","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","hasChildNodes","hydrate","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","render"],"mappings":"+UAWMA,EAAiCC,IAAMC,YA+B9BC,EA7BK,SAACC,GACnBC,qBAAU,WACRC,OAGF,IAAMA,EAAO,WACX,IAAMC,EAAyB,GACrBC,YAAU,KAClBC,MAAK,SAACC,EAAGC,GACTJ,EAAaK,KAAKF,MAEhBG,KAAKC,UAAUV,EAAMW,QAAUF,KAAKC,UAAUP,KAEhDS,QAAQC,IAAI,SACZC,YAAOlB,EAAImB,SACRX,UAAU,KACVO,KAAKX,EAAMW,MACXK,QACAC,OAAO,KACPC,MAAK,SAACZ,GAAD,mBAAaA,QAGzB,OAAO,yBAAKa,UAAU,cAAcvB,IAAKA,KCT5BwB,MAlBf,WAAgB,IAAD,EACWC,mBAAmB,CAAC,MAAO,MAAO,QAAS,SADtD,mBACNV,EADM,KACAW,EADA,KAEb,OACE,yBAAKH,UAAU,OAKb,kBAAC,EAAD,CAAaR,KAAMA,IACnB,kBAACY,EAAA,EAAD,CAAQC,QAAS,kBAAMF,EAAQ,CAAC,MAAO,MAAO,QAAS,OAAQ,WAA/D,SAEA,kBAAC,IAAD,CAASG,GAAG,aAAaC,IAAI,aAA7B,2BCFAC,EAASC,gBAAK,kBAAM,gCACpBC,EAAU,CACdC,QAAS,IA+DIC,EA5DsB,WACnC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,6CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IAQjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,aAAaC,UAAWC,wBAAcT,EAAQE,UCxBtEQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAwCnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAK1B5C,QAAQC,IAAI,iHAGRgC,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBtC,QAAQC,IAAI,sCAGRgC,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACNhD,QAAQgD,MAAM,4CAA6CA,MChFjE,IAAMC,EAAcC,SAASC,eAAe,QACxCF,GAAeA,EAAaG,iBAC9BC,kBAAQ,kBAAC,EAAD,MAAeJ,GDQlB,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,GAAN,sBAEP9B,IA4DV,SAAiCO,EAAeC,GAE9C0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAACwB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBACjB,MAApBF,EAASG,QAAkC,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAEzE/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAACC,GAClCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL/C,QAAQC,IAAI,oEA/EVoE,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WAEjCrC,QAAQC,IAAI,iHAId8B,EAAgBC,EAAOC,OC5B7BE,IAEAmC,iBAAO,kBAAC,EAAD,MAAerB,K","file":"static/js/main.f0d19790.chunk.js","sourcesContent":["/*\nAuthor: Eli Elad Elrom\nWebsite: https://EliElrom.com\nLicense: MIT License\nComponent: src/component/HelloD3Data/HelloD3Data.tsx\n*/\n\nimport React, { RefObject, useEffect } from 'react'\nimport './HelloD3Data.scss'\nimport { select, selectAll } from 'd3-selection'\n\nconst ref: RefObject<HTMLDivElement> = React.createRef()\n\nconst HelloD3Data = (props: IHelloD3DataProps) => {\n  useEffect(() => {\n    draw()\n  })\n\n  const draw = () => {\n    const previousData: string[] = []\n    const p = selectAll('p')\n    p.each((d, i) => {\n      previousData.push(d as string)\n    })\n    if (JSON.stringify(props.data) !== JSON.stringify(previousData)) {\n      // eslint-disable-next-line no-console\n      console.log('draw!')\n      select(ref.current)\n        .selectAll('p')\n        .data(props.data)\n        .enter()\n        .append('p')\n        .text((d) => `d3 ${d}`)\n    }\n  }\n  return <div className=\"HelloD3Data\" ref={ref} />\n}\n\ninterface IHelloD3DataProps {\n  data: string[]\n}\n\nexport default HelloD3Data\n","import React, { useState } from 'react'\nimport './App.scss'\nimport { Button } from '@material-ui/core'\nimport { NavLink } from 'react-router-dom'\nimport HelloD3Data from './components/HelloD3Data/HelloD3Data'\n\n// import Rectangle from './components/Rectangle/Rectangle'\n\nfunction App() {\n  const [data, setData] = useState<string[]>(['one', 'two', 'three', 'four'])\n  return (\n    <div className=\"App\">\n      {/*\n        <Rectangle />\n      */}\n\n      <HelloD3Data data={data} />\n      <Button onClick={() => setData(['one', 'two', 'three', 'four', 'five'])}>Click</Button>\n\n      <NavLink to=\"/Rectangle\" key=\"Rectangle\">\n        Navigate To Rectangle\n      </NavLink>\n    </div>\n  )\n}\n\nexport default App\n","// src/AppRouter.tsx\n\nimport React, { FunctionComponent, lazy, Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\n\n// With Lazy loading\n// @ts-ignore\n// eslint-disable-next-line import/extensions\nimport { withQuicklink } from 'quicklink/dist/react/hoc.js'\n\nimport App from './App'\n\n// Without Lazy loading\n// import Rectangle from './components/Rectangle/Rectangle'\n\n// With Lazy loading\nconst MyPage = lazy(() => import('./components/Rectangle/Rectangle'))\nconst options = {\n  origins: [],\n}\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <RecoilRoot>\n        <Suspense fallback={<span>Loading...</span>}>\n          <Switch>\n            <Route exact path=\"/\" component={App} />\n            {/*\n              // Without Lazy loading\n              <Route exact path=\"/Rectangle\" component={Rectangle} />\n\n              // With Lazy loading\n              <Route exact path=\"/Rectangle\" component={withQuicklink(MyPage, options)} />\n            */}\n            <Route exact path=\"/Rectangle\" component={withQuicklink(MyPage, options)} />\n          </Switch>\n        </Suspense>\n      </RecoilRoot>\n    </Router>\n  )\n}\n\n/*\n\n// TODO: EE: Without Recoil or Redux;\n\n// src/AppRouter.tsx\n\nimport React, { FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  )\n}\n\n */\n\n/*\n// TODO EE: To replace Recoil state management with Redux Toolkit;\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n<Router>\n  <Provider store={store}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </Provider>\n</Router>\n\n */\n\nexport default AppRouter\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA')\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line\n              console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.')\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport { hydrate, render } from 'react-dom'\nimport './index.scss'\nimport AppRouter from './AppRouter'\nimport * as serviceWorker from './serviceWorker'\n\n// Single-page application (SPA)\n// ReactDOM.render(<AppRouter />, document.getElementById('root'))\n\n// If you want to Pre-render with react-snap\n// Step 1: install $ yarn add --dev react-snap\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\n// Step 3: replace to the script below.\n\nconst rootElement = document.getElementById('root')\nif (rootElement && rootElement!.hasChildNodes()) {\n  hydrate(<AppRouter />, rootElement)\n\n  // Precache - set to 'register' once you Pre-render\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register()\n} else {\n  render(<AppRouter />, rootElement)\n}\n"],"sourceRoot":""}